// Thank you to RSBot for the lever numbers, without them this would have been impossible
// By Cstrike
// DONT BE DUMB LIKE ME (Cstrike), DO NOT SOLVE A P2P ACCOUNT ON F2P. BAD IDEA.

const
  R_ABYSS_LEVER_N = 8995;
  R_ABYSS_LEVER_S = 8997;
  R_ABYSS_LEVER_E = 8994;
  R_ABYSS_LEVER_W = 8996;

  // E, N, W, S
  // 4  5  6  7

function R_InAbyss : Boolean;
begin
  Result := not (GetObjectByID(R_ABYSS_LEVER_E, OBJECT_TYPE_INTERACTABLE, 15) = NULL_RSOBJECT);
end;

function R_AbyssSearchLever (Setting : Integer; LeverArray : TIntegerArray) : Boolean;
var
  i : Integer;
begin
  if not LoggedIn then
    Exit;
  Result := False;
  for i:=0 to high (LeverArray) do
  begin
    if LeverArray[i] = Setting then
    begin
      Result := True;
      R_Debug('Found matching setting', 'Abyss');
      Exit;
    end;
  end;
end;

function R_AbyssDetermineLever (var Direction : String) : Boolean;
var
  Setting531, i : Integer;
  LeverN, LeverS, LeverE, LeverW : TIntegerArray;
begin
  if not LoggedIn then
    Exit;
  Result := False;
  Direction := '';
  LeverN := [135172, 101443, 33793, 33889, 67778, 32, 169061, 135236, 34017, 135332, 202982, 67682, 33953, 192, 64, 67714, 169093, 101603, 168997, 101539, 67586, 236743, 128, 101411];
  LeverE := [169121, 101473, 101474, 1, 236774, 2, 202951, 67648, 169123, 33827, 67652, 169124, 67654, 4, 101479, 135301, 67651, 33829, 135296, 6, 33824, 33831, 101477, 135298];
  LeverS := [198722, 68707, 32768, 235718, 164897, 65536, 69764, 4228, 35939, 167011, 204007, 38053, 1057, 100418, 168068, 103589, 131072, 196608, 230433, 99361, 133186, 2114, 136357, 232547];
  LeverW := [0, 235751, 1024, 99427, 32801, 4096, 131204, 203974, 68674, 37921, 69698, 167077, 65602, 65602, 133252, 168101, 136324, 35873, 100451, 2048, 71746, 165029, 103523];
  for i:=1 to 3 do
  begin
    Setting531 := GetSetting(531);
    R_Debug('Setting #531: ' + IntToStr(Setting531), 'Abyss');
    if not R_AbyssSearchLever (Setting531, LeverN) then
    begin
      if not R_AbyssSearchLever (Setting531, LeverE) then
      begin
        if not R_AbyssSearchLever (Setting531, LeverS) then
        begin
          if not R_AbyssSearchLever (Setting531, Leverw) then
          begin
            R_Debug('Warning, had trouble getting direction to press [attempt '+inttostr(i)+' of 3], PLEASE REPORT THIS NUMBER TO REFLECTION DEVS ASAP!', 'Abyss');
            Wait (1000+random(500));
          end else Direction := 'w';
        end else Direction := 's';
      end else Direction := 'e';
    end else Direction := 'n';
    if Direction <> '' then Result := True;
    if Result then Break;
  end;
end;

function R_AbyssGetLeverTile(LeverNumber: Integer; T: TTile): TTile;
begin
  case LeverNumber of
    R_ABYSS_LEVER_N: Result := Tile(T.x, T.y + 1);
    R_ABYSS_LEVER_S: Result := Tile(T.x, T.y - 1);
    R_ABYSS_LEVER_E: Result := Tile(T.x + 1, T.y);
    R_ABYSS_LEVER_W: Result := Tile(T.x - 1, T.y);
  end;
end;

function R_AbyssPullLever(LeverNumber: Integer): Boolean;
var
  i, x, y: Integer;
  LeverObj: TRSObject;
  TP: TPoint;
  AbyssCenter, LeverTile: TTile;
begin
  Result := False;
  if not LoggedIn then
    Exit;

  SetAngle(True);

  for I:=0 to 3 do // Try 4x
  begin
    LeverObj := GetObjectByID(LeverNumber, OBJECT_TYPE_INTERACTABLE, 20); //Get the object data

    LeverTile := R_AbyssGetLeverTile(LeverNumber, LeverObj.Tile);
    R_Debug('LeverTile: ' + ToStr(LeverTile), 'Abyss');

    if Not TileOnMS(LeverTile, 300) then //If Object not on screen then
    begin
      R_Debug('Tile not found on MS, moving near it', 'Abyss');
      case LeverNumber of
        R_ABYSS_LEVER_N: AbyssCenter := Tile(LeverTile.x, LeverTile.y - 1);
        R_ABYSS_LEVER_S: AbyssCenter := Tile(LeverTile.x, LeverTile.y + 1);
        R_ABYSS_LEVER_E: AbyssCenter := Tile(LeverTile.x - 1, LeverTile.y);
        R_ABYSS_LEVER_W: AbyssCenter := Tile(LeverTile.x + 1, LeverTile.y);
      end;

      if not WalkToTile(AbyssCenter, 0, 0)then //Walk to center!
        R_Debug('Failed to walk near appendage', 'Abyss')
          else R_Debug('Walked to appendage', 'Abyss');

    end else
      R_Debug('Desired lever is on mainscreen', 'Abyss');

    {case LeverNumber of // note by Harry: this is worthless, and actually BREAKS the solver in my experence.
        R_ABYSS_LEVER_N: MakeCompass ('s');
        R_ABYSS_LEVER_S: MakeCompass ('n');
        R_ABYSS_LEVER_E: MakeCompass ('w');
        R_ABYSS_LEVER_W: MakeCompass ('e');
    end;}

    R_Flag;

    TP := TileToMS(LeverTile, 150);
    MMouse(TP.x, TP.y, 10, 10);

    if r_WaitUpTextMulti(['Operate', 'ppendage'], 1000) then
    begin
      GetMousePos(X, Y);
      R_Debug('Found proper lever! Pulling...', 'Abyss');
      Mouse(X, Y, 0, 0, False);
      Result := r_WaitOptionMulti(['Operate', 'Appendage'], 400+Random(100));
      if Result then
      begin
        R_Debug('Lever pulled. Waiting for exit', 'Abyss');
        Exit;
      end;
      R_Debug('Lever not pulled. Trying again.', 'Abyss');
    end else
      R_Debug('Lever uptext not found', 'Abyss');

  end;
end;

function R_SolveAbyss : Boolean;
var
  Direction : String;
  t, Total: Integer;
begin
  if not LoggedIn then
    Exit;
  Result := False;
  Direction := ''; // Failsafe
  MarkTime(Total);
  while R_InAbyss do
  begin
    if (TimeFromMark(Total) > (1000 * 60 * 3)) then
    begin
      R_Debug('Solving Timed-Out', 'Abyss');
      Result := False;
      Exit;
    end;
    R_AbyssDetermineLever (Direction);

    if Direction = '' then
      R_Debug('Failed getting proper appendage in Abyssal random. Please report this to reflection developers!', 'Abyss')
    else
    Case Direction of
      'n': Result := R_AbyssPullLever(R_ABYSS_LEVER_N);
      's': Result := R_AbyssPullLever(R_ABYSS_LEVER_S);
      'e': Result := R_AbyssPullLever(R_ABYSS_LEVER_E);
      'w': Result := R_AbyssPullLever(R_ABYSS_LEVER_W);
    end;
    if Result then Break;
  end;
  MarkTime(t);
  if Result then
  begin
    while (R_InAbyss and (TimeFromMark(t) < 8000)) do
      Wait(1500);
    R_Debug('Out of Abyss', 'Abyss');
    Wait(2000+Random(2000));
  end;
  ClickToContinue;
  Wait(4000+Random(2000));
  Result := not R_InAbyss;
end;
