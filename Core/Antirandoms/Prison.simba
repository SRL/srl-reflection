// Need a global variable for mouse speed so we can reset it later on.
var
  g_MouseSpeedBeforePrisonRandom: Integer;

// Random constants
const
  PRISON_PETENAME = 'Prison Pete';
  PRISON_PETEID = 3118;
  PRISON_PETE_TILE_X = 2084;
  PRISON_PETE_TILE_Y = 4460;
  PRISON_DOOR_EXIT_X = 2085;
  PRISON_DOOR_EXIT_Y = 4460;
  PRISON_DOOR_TILEMSEX_X = 1.0;
  PRISON_DOOR_TILEMSEX_Y = 1.0;
  PRISON_KEYID = 6966;
  PRISON_LEVERID = 10817;
  PRISON_LEVERUPTEXT = 'Pull Lever';
  PRISON_MODELINTERFACE = 273;
  PRISON_MODELCOMPONENT = 3;
  PRISON_DEPOSITBOXID = 32924;
  PRISON_NPCPOPNAME = 'Pop Balloon animal';
  PRISON_EXITDOORFINAL = 'Open Unlocked door';
  PRISON_NPCMOUSESPEED = 50;

  // Phase setup
  PRISON_PHASE_TALKTOPETEATSTART = 0;
  PRISON_PHASE_CHECKIFTERMINATED = 1;
  PRISON_PHASE_FINISHSTARTINGCONVERSATION = 2;
  PRISON_PHASE_PULLLEVER = 3;
  PRISON_PHASE_ANALYZEANIMAL = 4;
  PRISON_PHASE_POPANIMAL = 5;
  PRISON_PHASE_CHECKIFWENEEDMOREKEYS = 6;
  PRISON_PHASE_RANDOMCOMPLETED = 7;
  PRISON_PHASE_EXITTHROUGHDOOR = 8;
  PRISON_PHASE_TERMINATERANDOM = 9;
  PRISON_PHASE_SOLVEDRANDOM = 10;

// WORKS!
{*******************************************************************************
function R_InPrison : Boolean;
By: Cstrike
Description: Checks if in this random. Don't know if hes null or not.
*******************************************************************************}
function R_InPrison : Boolean;
begin
  Result := ValidNPC(PRISON_PETEID);
  if not Result then
    Result := ValidNullNPC(PRISON_PETEID);
end;

// WORKS!
{*******************************************************************************
function R_PrisonPreTerminated : Boolean;
By: Cstrike
Description: Lucky you! You're screwed. TPA code thanks to Shuttleu.
*******************************************************************************}
function R_PrisonPreTerminated : Boolean;
var
  Tempx, Tempy: Integer;
begin
  if not LoggedIn then
    Exit;
  Result := False;
  Tempx := 0;
  Tempy := 0;
  FindTextTPAEx(clBlack, 0, MCX1, MCY1, MCX2, MCY2, Tempx, Tempy, 'ucky you', CharsNPC, Nothing);
  if (Tempx > 260) and (Tempy > 410) then
    Result := True;
end;

// WORKS!
{*******************************************************************************
function R_PrisonClickOnPete : Boolean;
By: Cstrike
Description: Moves near him if need be and clicks on him.
*******************************************************************************}
function R_PrisonClickOnPete : Boolean;
var
  PrisonPeteNPCList : TNPCArray;
  PrisonPeteTile : TTile;
  i : Integer;
  TP : TPoint;
begin
  if not LoggedIn then
    Exit;
  Result := False;

  // Make sure NPC is valid
  if ValidNullNPC(PRISON_PETEID) then
    PrisonPeteNPCList := GetAllNPCs(True)
  else
    PrisonPeteNPCList := GetAllNPCs(False);
  // Failsafe
  if high(PrisonPeteNPCList) < 0 then
  begin
    R_Debug('Could not find Prison Pete! NPC arrays are empty', 'Prison');
    Exit;
  end;

  // Find his tile
  PrisonPeteTile := Tile(0,0); // Failsafe
  for i:=0 to high(PrisonPeteNPCList) do
  begin
    if (PrisonPeteNPCList[i].ID = PRISON_PETEID) then
    begin
      PrisonPeteTile := PrisonPeteNPCList[i].Tile;
      Break;
    end;
  end;

  // If we can't see him, move near him
  if not TileOnMS (PrisonPeteTile, 0) then
    WalkToTile (PrisonPeteTile, 2, 0);

  wait (350+random(550));
  // Click on the guy
  if TileOnMS (PrisonPeteTile, 0) then
  begin
    TP := TileToMS (PrisonPeteTile, 0);
    Mouse (TP.x, TP.y, 2, 2, false);
    wait (500+random(500));
    if R_ChooseOptionMulti (['rison', 'ete']) then
      Result := True;
  end else R_Debug('Could not find Prison Pete tile on MS', 'Prison');
  wait (500+random(1000));
  if Result then R_Debug('Successfully clicked to talk to Prison Pete', 'Prison');
end;

// WORKS!
{*******************************************************************************
function R_PrisonByPassText(Text: String; ParentI, ChildI, TimeoutMs: Integer): Boolean;
By: Cstrike
Description: Clicks text and returns true if it clicked, false if no "click cnt"
*******************************************************************************}
function R_PrisonByPassText(Text: String; ParentI, ChildI, TimeoutMs: Integer): Boolean;
var
  GrabText : String;
  t: Integer;
begin
  if not LoggedIn then
    Exit;
  Result := False;
  MarkTime(t);
  repeat
    wait (400+random(200));
    GrabText := GetInterfaceComponentText (ParentI, ChildI);
    if Pos(Text, GrabText) > 0 then
    begin
      Mouse(303, 452, 72, 7, True);
      wait (1000+random(500));
      Result := True;
      Exit;
    end;
  until (TimeFromMark(t) > TimeoutMs)
end;

{*******************************************************************************
procedure R_PrisonLookForCrapText;
By: Cstrike
Description: Gets rid of crap text that no one wants.
*******************************************************************************}
procedure R_PrisonLookForCrapText;
var
  ExitLoop: Boolean;
  t: Integer;
begin
  if not LoggedIn then
    Exit;
  MarkTime(t);
  repeat
    ExitLoop := True;
    if FindNPCText ('held captive by')
      or FindNPCText ('these balloon animals have')
        or FindNPCText ('then pop that sort of')
          or FindNPCText ('me any keys you get')
            or FindNPCText ('before that cat notices') // After random solved
              or FindNPCText ('a lot for your help') then // After random finished
              begin
                R_Debug('Found useless text, clicking continue...','Prison');
                ClickToContinue;
                ExitLoop := False;
              end;
    Wait (300+random(600));
  until (ExitLoop) or (TimeFromMark(t) > 10000)
end;

// WORKS!
{*******************************************************************************
function R_PrisonPullLever: Boolean;
By: Cstrike
Description: Pulls the lever.
*******************************************************************************}
function R_PrisonPullLever: Boolean;
var
  Lever: TRSObject;
  TP: TPoint;
  i, x, y: Integer;
  FindLeverBlind: Boolean;
begin
  if not LoggedIn then
    Exit;
  Result := False;
  FindLeverBlind := False;
  MakeCompass ('s');

  // Check for lever
  Lever := GetObjectByID(PRISON_LEVERID, OBJECT_TYPE_INTERACTABLE, 25);
  if (Lever = NULL_RSOBJECT) then
  begin
    R_Debug('Lever is considered a NULL_RSOBJECT... attempting blind-find', 'Prison');
    FindLeverBlind := True; // Obsolete
    Lever.Tile := Tile(PRISON_PETE_TILE_X - 1, PRISON_PETE_TILE_Y);
  end;

  // Lever finding time
  if not TileOnMS (Lever.Tile, 0) then
  begin
    R_Debug('Lever not on MS, moving towards it...','Prison');
    WalkToTile (Lever.Tile, 2, 0);
    wait (250+random(250));
  end;
  if TileOnMS (Lever.Tile, 0) then
  begin
    wait (200+random(300));
    for i:=1 to 3 do
    begin
      R_Debug('Attempt '+ToStr(i)+' of 3 in pulling prison lever', 'Prison');
      TP := TileToMSEx(Lever.Tile, 0.5, 0.0, 500);
      MMouse (TP.X, TP.Y, 1, 2);
      if R_IsUpTextMulti (['ull', 'ever']) then
      begin
        GetMousePos (x, y);
        Mouse (x, y, 0, 0, false);
        if R_ChooseOptionMulti (['ull', 'ever']) then
        begin
          R_Debug('Lever pulled', 'Prison');
          Result := True;
          Exit;
        end else R_Debug('Lever R_ChooseOptionMulti failed', 'Prison');
      end else R_Debug('Lever R_IsUpTextMulti failed', 'Prison');
      wait (850+random(800));
    end;
    R_Debug('Failed to find lever and/or pull it', 'Prison');
  end else R_Debug('Lever is still not on MS somehow...!', 'Prison');
end;

// WORKS!
{*******************************************************************************
function R_PrisonWaitForNPCScreen(TimeoutMs: Integer): Boolean;
By: Cstrike
Description: Waits for the animal screen to come up to show you what to pop.
*******************************************************************************}
function R_PrisonWaitForNPCScreen(TimeoutMs: Integer): Boolean;
var
  t: Integer;
begin
  if not LoggedIn then
    Exit;
  Result := False;
  MarkTime(t);
  repeat
    wait (100+random(100));
  until (ValidInterface(PRISON_MODELINTERFACE)) or (TimeFromMark(t) > TimeoutMs)
  Result := ValidInterface (PRISON_MODELINTERFACE);
  if not Result then
    R_Debug('PRISON_MODELINTERFACE timed out', 'Prison');
end;

// WORKS!
{*******************************************************************************
function R_PrisonHowDoIGetOutOfHere : Boolean;
By: Cstrike
Description: Selects that option.
*******************************************************************************}
function R_PrisonHowDoIGetOutOfHere : Boolean;
begin
  if not LoggedIn then
    Exit;
  Result := False;
  if (GetInterfaceComponentText(228, 3) = 'How do I get out of here?') then
  begin
    Mouse (261, 431, 15, 2, true);
    wait (500+random(500));
    Result := True;
  end;
end;

{*******************************************************************************
procedure R_PrisonCloseModelInterface;
By: Cstrike
Description: Closes the interface
*******************************************************************************}
procedure R_PrisonCloseModelInterface;
var
  t: Integer;
begin
  if not LoggedIn or not (ValidInterface(PRISON_MODELINTERFACE)) then
    Exit;
  MarkTime(t);
  repeat
    Mouse (498, 22, 2, 2, true);
    wait (800+random(800));
  until not (ValidInterface(PRISON_MODELINTERFACE)) or (TimeFromMark(t) > 5000)
  if not TimeFromMark(t) > 5000 then
    R_Debug('Closed model interface successfully','Prison')
  else
    R_Debug('Timed out closing model','Prison');
end;

// WORKS!
{*******************************************************************************
function R_PrisonReturnModelToPopID: Integer;
By: Cstrike
Description: Selects that option.
*******************************************************************************}
function R_PrisonReturnModelToPopID: Integer;
begin
  if not LoggedIn then
    Exit;
  Result := -1;
  wait (500+random(1500));
  if ValidInterface (PRISON_MODELINTERFACE) then
    Result := GetInterfaceComponentModelID (PRISON_MODELINTERFACE, PRISON_MODELCOMPONENT)
  else
    R_Debug ('Prison popping interface was not valid', 'Prison');
  R_Debug ('Model ID obtained: '+ToStr(Result), 'Prison');
  R_PrisonCloseModelInterface;
  wait (500+random(500));
end;

// WORKS!
{*******************************************************************************
function R_PrisonDetermineNPCToPop(ModelID: Integer; var BalloonID: Integer; var BalloonDataArray : TIntegerArray): Boolean;
By: Cstrike
Description: Fills variables with data, returns true if it filled the variables.
BalloonDataArray borrowed from RSBot, though I haven't used their data at all.
*******************************************************************************}
function R_PrisonDetermineNPCToPop(ModelID: Integer; var BalloonNPCIDs: TIntegerArray; var BalloonDataArray : TIntegerArray; var BalloonHeights : TIntegerArray): Boolean;
begin
  if not LoggedIn then
    Exit;
  Result := False;
  BalloonNPCIDs := [];
  BalloonDataArray := [];
  BalloonHeights := [];

  // Date of me running NullNPCGrabber on all the NPCIDs: ~Dec 1st or 2nd
  case ModelID of
    10749: begin // Long tail, dog
             BalloonNPCIDs := [13098, 11238, 11239, 11240];
             BalloonDataArray := [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 2, 2, 8, 8, 5, 5, 9, 9, 10, 11, 11, 15, 16, 17, 13, 14, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 29, 29, 30, 30, 31, 32, 33, 33, 36, 36, 36, 36, 36, 37, 37, 37, 38, 38, 39, 39, 40, 40, 22, 41, 41, 42, 43, 44, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 50, 50, 51, 51, 52, 53, 53, 54, 54, 49, 49, 55, 55, 52, 52, 56, 56, 57, 22, 22, 61, 62, 63, 59, 60, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 67, 67, 67, 68, 68, 69, 69, 70, 70, 43, 71, 71, 72, 72, 68, 68, 73, 73, 43, 43, 74, 74, 75, 76, 76, 80, 81, 82, 78, 79, 85, 85, 85, 85, 85, 86, 86, 86, 87, 87, 88, 88, 89, 89, 90, 91, 91, 92, 43, 93, 96, 96, 96, 96, 96, 97, 97, 97, 98, 98, 99, 99, 100, 100, 5, 101, 101, 102, 103, 104, 107, 107, 107, 107, 107, 108, 108, 108, 109, 109, 110, 110, 111, 111, 103, 112, 112, 113, 114, 115];
             BalloonHeights := [288, 274]; // [0]=Lowest, [1]=Highest //NPC Height is absolute value for SRL-Ref
             Result := True;
           end;
    10750: begin // Bubble tail ID, cat
             BalloonNPCIDs := [13100, 11236, 13094, 13099];
             BalloonDataArray := [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 2, 2, 8, 8, 5, 5, 9, 9, 10, 11, 11, 15, 16, 17, 13, 14, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 29, 29, 30, 30, 31, 32, 33, 33, 36, 36, 36, 36, 37, 37, 38, 38, 39, 22, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 45, 45, 46, 46, 47, 48, 48, 49, 49, 44, 44, 50, 50, 47, 47, 51, 51, 52, 22, 22, 56, 57, 58, 54, 55, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 62, 63, 63, 64, 64, 65, 65, 38, 66, 66, 67, 67, 63, 63, 68, 68, 38, 38, 69, 69, 70, 71, 71, 75, 76, 77, 73, 74, 80, 80, 80, 80, 80, 81, 81, 81, 82, 82, 82, 83, 83, 83, 84, 84, 5, 85, 85, 86, 86, 87, 87, 88, 89, 89, 90, 90, 92, 93, 96, 96, 96, 96, 97, 97, 98, 98, 99, 100, 103, 103, 103, 103, 104, 104, 105, 105, 106, 107];
             BalloonHeights := [342, 320];
             Result := True;
           end;
    10751: begin // Fatass(aka: Cartman), rabbit
             BalloonNPCIDs := [11237, 13091, 13092, 13093];
             BalloonDataArray := [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 2, 2, 8, 8, 5, 5, 9, 9, 10, 11, 11, 15, 16, 17, 13, 14, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 29, 29, 30, 30, 31, 32, 33, 33, 36, 36, 36, 36, 36, 37, 37, 37, 38, 38, 39, 39, 40, 40, 41, 42, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 48, 48, 49, 49, 50, 51, 51, 52, 52, 47, 47, 53, 53, 50, 50, 54, 54, 55, 22, 22, 59, 60, 61, 57, 58, 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 65, 66, 66, 67, 67, 68, 68, 43, 69, 69, 70, 70, 66, 66, 71, 71, 43, 43, 72, 72, 73, 74, 74, 78, 79, 80, 76, 77, 83, 83, 83, 83, 83, 84, 84, 84, 85, 85, 86, 86, 87, 87, 89, 90, 92, 92, 92, 92, 93, 93, 94, 94, 95, 5, 98, 98, 98, 98, 98, 99, 99, 99, 22, 22, 100, 100, 101, 101, 101, 102, 102, 103, 103, 103, 104, 105, 106, 106, 107, 107, 108, 109, 110, 110, 113, 113, 113, 113, 113, 114, 114, 114, 22, 22, 115, 115, 116, 116, 116, 117, 117, 118, 118, 118, 119, 120, 121, 121, 122, 122, 123, 124, 125, 125, 128, 128, 128, 128, 128, 129, 129, 129, 22, 22, 130, 130, 131, 131, 131, 132, 132, 133, 133, 133, 134, 135, 136, 136, 137, 137, 138, 32, 139, 139];
             BalloonHeights := [252, 232];
             Result := True;
           end;
    10752: begin // Horns, goat
             BalloonNPCIDs := [13096, 13095, 11238, 13097, 11241];
             BalloonDataArray := [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 2, 2, 8, 8, 5, 5, 9, 9, 10, 11, 11, 15, 16, 17, 13, 14, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 29, 29, 30, 30, 31, 32, 33, 33, 36, 36, 36, 36, 36, 37, 37, 37, 38, 38, 39, 39, 40, 40, 22, 41, 41, 42, 43, 44, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 50, 50, 51, 51, 52, 53, 53, 54, 54, 49, 49, 55, 55, 52, 52, 56, 56, 57, 22, 22, 61, 62, 63, 59, 60, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 67, 67, 67, 68, 68, 69, 69, 70, 70, 43, 71, 71, 72, 72, 68, 68, 73, 73, 43, 43, 74, 74, 75, 76, 76, 80, 81, 82, 78, 79, 85, 85, 85, 85, 85, 86, 86, 86, 87, 87, 88, 88, 89, 89, 90, 91, 91, 92, 43, 93, 96, 96, 96, 96, 97, 97, 98, 98, 99, 5, 102, 102, 102, 102, 102, 102, 103, 103, 103, 103, 104, 104, 105, 105, 106, 106, 106, 107, 107, 108, 109, 109, 110, 110, 110, 111, 112, 113, 117, 115, 119, 119, 119, 119, 119, 119, 120, 120, 120, 120, 121, 121, 122, 122, 123, 123, 123, 124, 124, 125, 126, 126, 127, 127, 127, 128, 129, 130, 134, 132, 136, 136, 136, 136, 136, 137, 137, 137, 22, 22, 138, 138, 139, 139, 139, 140, 140, 141, 141, 141, 142, 143, 144, 144, 145, 145, 146, 147, 148, 148, 151, 151, 151, 151, 151, 152, 152, 152, 22, 22, 153, 153, 154, 154, 154, 155, 155, 156, 156, 156, 157, 158, 159, 159, 160, 160, 161, 162, 163, 163];
             BalloonHeights := [389, 373];
             Result := True;
           end;
  end;

  // Debug for us
  if Result then
    R_Debug('Balloon ID returned from model "'+ToStr(ModelID)+'" = '+ToStr(BalloonNPCIDs),'Prison')
  else
  begin
    R_Debug('Bad data array from bad ModelID ('+ToStr(ModelID)+'), returning all models','Prison');
    BalloonNPCIDs := [13096, 13095, 11238, 13097, 11241, 11237, 13091, 13092, 13093, 13100, 11236, 13094, 13099, 13098, 11238, 11239, 11240];
    BalloonHeights := [0, 0]; //Nothing
  end;
end;

{*******************************************************************************
function R_PrisonFindAndPopNPC(IDsToPop: TIntegerArray): Boolean;
By: Cstrike
Description: Searches for the balloon and pops it until I gets the key.
*******************************************************************************}
function R_PrisonFindAndPopNPC(IDsToPop: TIntegerArray): Boolean;
var
  i, t, t2, NPCCount, NPCIDToHunt: Integer;
  NPCs: TNPCArray;
  TP: TPoint;
  NPCToHunt: TNPC;
begin
  if not LoggedIn then
    Exit;
  Result := False;

  // If we haven't already...
  R_PrisonCloseModelInterface;

  NPCIDToHunt := -1; // Useless?

  // Find IDs to pop
  if high(IDsToPop) < 0 then
  begin
    R_Debug('Warning: IDsToPop has no values in it...', 'Prison');
    Exit;
  end;

  // Set variables
  MouseSpeed := 50; // Set mouse speed for popping the SOB's
  NPCCount := high(IDsToPop)+1; // Set which NPC we want to hunt // NOT USED?

  // Begin popfest
  MarkTime(t);
  R_Debug ('Beginning popping attempt...', 'Prison');
  repeat

    // Get NPCs
    NPCs := GetAllNPCs(True);

    // If error...
    if high(NPCs) < 0 then
    begin
      R_Debug ('There are no null NPCs, which means no balloons...WTF!?', 'Prison');
      Exit;
    end;

    // Find valid NPC to hunt
    for i:=0 to high(NPCs) do // Search all NPCs
    begin
      if InIntArray(IDsToPop, NPCs[i].ID) then // If it's a valid balloon then do the hard stuff
      begin
        if not TileInBox(IntToBox(PRISON_PETE_TILE_X - 3, PRISON_PETE_TILE_Y - 1, PRISON_PETE_TILE_Y + 6, PRISON_PETE_TILE_Y - 3), NPCs[i].Tile) then
        begin
          NPCIDToHunt := NPCs[i].ID;
          R_Debug ('Hunting NPC ID: '+ToStr(NPCIDToHunt),'Prison');
          Break;
        end else R_Debug ('Ignoring NPC due to it being outside the gate [lol]','Prison');
      end else R_Debug (ToStr(NPCs[i].ID)+' is not in IDsToPop!','Prison');
    end;

    // Hunt it ruthlessly!
    MarkTime(t2);
    repeat // So we KNOW the balloon is here somewhere, lets hunt that fucker
      NPCToHunt := GetNullNPC(NPCIDToHunt);

      // If error
      if NPCToHunt.Tile = NULL_TILE then
      begin
        R_Debug('NPCToHunt is apparently null now, exiting...','Prison');
        Break;
      end;

      // If not on screen
      if not TileOnMS(NPCToHunt.Tile, 0) then
      begin
        WalkToTile(NPCToHunt.Tile, 2, 0);
        NPCs := GetAllNPCs(True); // Reload NPCs, should upgrade tiles... after
      end else
      // Else if we see him, get him
      begin
        TP := TileToMS(NPCToHunt.Tile, 0);
        Mouse (TP.X - 1, TP.Y - 1, 2, 2, false);
        wait (100+random(350));
        if R_ChooseOptionMulti (['nimal', 'alloon']) then
        begin
          R_Debug ('Selected balloon to pop...', 'Prison');
          Result := True;
          Wait (3000+random(1500));
          if R_CountItem(PRISON_KEYID) > 0 then
          begin
            R_Debug ('Got a key!', 'Prison');
            Result := True;
            MouseSpeed := g_MouseSpeedBeforePrisonRandom;
            Exit;
          end else
            R_Debug ('We don''t have the key yet? Waiting...', 'Prison');
          // Try again
          Wait (3000+random(2500));
          if R_CountItem(PRISON_KEYID) > 0 then
          begin
            R_Debug ('Got a key!', 'Prison');
            Result := True;
            MouseSpeed := g_MouseSpeedBeforePrisonRandom;
            Exit;
          end else R_Debug ('Wow still no key? We messed up or lag.', 'Prison');
          R_Debug ('Failed getting key', 'Prison');
        end else R_Debug ('Couldn''t find balloon at spot', 'Prison');
      end;
    until (TimeFromMark(t2) > 12000) // Time out of finding that specific NPC
  until (TimeFromMark(t) > 24000)
end;






{*******************************************************************************
function R_PrisonFindAndPopNPCByHeights(IDsToPop: TIntegerArray): Boolean;
By: cstrike, pyroryan
Description: Searches for the balloon and pops it until I gets the key.
*******************************************************************************}
function R_PrisonFindAndPopNPCByHeights(HeightsToPop: TIntegerArray): Boolean;
var
  i, t, t2, NPCCount,  NPCIDToHunt: Integer;
  NPCs: TNPCArray;
  AllNPCIDs : TIntegerArray;
  TP: TPoint;
  NPCToHunt: TNPC;
begin
  if not LoggedIn then
    Exit;
  Result := False;

  R_PrisonCloseModelInterface;
  AllNPCIDs := [11236, 11237, 11238, 11239, 11240, 11241, 13091, 13092, 13093, 13094, 13095, 13096, 13097, 13098, 13099, 13100];
  NPCIDToHunt := -1;

  // Find IDs to pop
  if high(HeightsToPop) < 0 then
  begin
    R_Debug('Warning: HeightsToPop has no values in it...', 'Prison');
    Exit;
  end;

  MouseSpeed := 50;
  NPCCount := high(HeightsToPop)+1; // Set which NPC we want to hunt // NOT USED?

  // Begin popfest
  MarkTime(t);
  R_Debug ('Beginning popping attempt...', 'Prison');
  repeat
    NPCs := GetAllNPCs(True);

    // If error...
    if high(NPCs) < 0 then
    begin
      R_Debug ('There are no null NPCs, which means no balloons...WTF!?', 'Prison');
      Exit;
    end;

    // Find valid NPC to hunt
    for i:=0 to high(NPCs) do // Search all NPCs
    begin
      if not (NPCs[i].Moving) then
        continue;
      if (HeightsToPop[0] >= NPCs[i].Height) then //Switched signs because of absolute value
      begin
        if (HeightsToPop[1] <= NPCs[i].Height) then
        begin
          if not TileInBox(IntToBox(PRISON_PETE_TILE_X - 3, PRISON_PETE_TILE_Y - 1, PRISON_PETE_TILE_Y + 6, PRISON_PETE_TILE_Y - 3), NPCs[i].Tile) then
          begin
            R_Debug('Success we have the balloon', 'Prison');
            R_Debug('NPCID from Height: '+ToStr(NPCs[i].ID),'Prison');
            NPCIDToHunt := NPCs[i].ID;
            R_Debug ('Hunting NPC ID: '+ToStr(NPCIDToHunt),'Prison');
            Break;
          end else R_Debug ('Ignoring NPC due to it being outside the gate [lol]','Prison');
        end else Continue;
      end else Continue;
    end;

    // Hunt it ruthlessly!
    MarkTime(t2);
    repeat // So we KNOW the balloon is here somewhere, lets hunt that balloon
      NPCToHunt := GetNullNPC(NPCIDToHunt);

      // If error
      if NPCToHunt.Tile = NULL_TILE then
      begin
        R_Debug('NPCToHunt is apparently null now, exiting...','Prison');
        Break;
      end;

      // If not on screen
      if not TileOnMS(NPCToHunt.Tile, 0) then
      begin
        WalkToTile(NPCToHunt.Tile, 2, 0);
        NPCs := GetAllNPCs(True); // Reload NPCs, should upgrade tiles... after
      end else
      // Else if we see him, get him
      begin
        TP := TileToMS(NPCToHunt.Tile, 0);
        Mouse (TP.X - 1, TP.Y - 1, 2, 2, false);
        wait (100+random(350));
        if R_ChooseOptionMulti (['nimal', 'alloon']) then
        begin
          R_Debug ('Selected balloon to pop...', 'Prison');
          Result := True;
          Wait (3000+random(1500));
          if R_CountItem(PRISON_KEYID) > 0 then
          begin
            R_Debug ('Got a key!', 'Prison');
            Result := True;
            MouseSpeed := g_MouseSpeedBeforePrisonRandom;
            Exit;
          end else
            R_Debug ('We don''t have the key yet? Waiting...', 'Prison');
          // Try again
          Wait (3000+random(2500));
          if R_CountItem(PRISON_KEYID) > 0 then
          begin
            R_Debug ('Got a key!', 'Prison');
            Result := True;
            MouseSpeed := g_MouseSpeedBeforePrisonRandom;
            Exit;
          end else R_Debug ('Wow still no key? We messed up or lag.', 'Prison');
          R_Debug ('Failed getting key', 'Prison');
        end else R_Debug ('Couldn''t find balloon at spot', 'Prison');
      end;
    until (TimeFromMark(t2) > 12000) // Time out of finding that specific NPC
  until (TimeFromMark(t) > 24000)
end;

// WORKS!
{*******************************************************************************
function R_PrisonExitRandom(FailedPrison: Boolean): Boolean;
By: Cstrike
Description: Leaves through the door.
*******************************************************************************}
function R_PrisonExitRandom(FailedPrison: Boolean): Boolean;
var
  TP: TPoint;
begin
  if not LoggedIn then
    Exit;
  Result := False;
  MakeCompass('n');
  WalkToTile(Tile(2085, 4460), 0, 0);
  TP := TileToMSEx (Tile(PRISON_DOOR_EXIT_X, PRISON_DOOR_EXIT_Y), 1.0, 0.0, 300);
  Mouse (TP.X, TP.Y, 1, 3, false);
  Wait (500+random(350));
  if R_ChooseOptionMulti (['nlocked', 'pen', 'oor']) then
  begin
    if not FailedPrison then
    begin
      R_Debug ('FREEEEDDDDOOOOOOOOMMMMM', 'Prison');
      Result := True; // Be more efficient later on w/ this
    end else
    begin
      R_Debug ('Leaving prison with head in shame', 'Prison');
      Result := True;
    end;
    Wait (500+random(500));
  end else R_Debug ('Somehow failed to open the door, wtf!', 'Prison');
end;

{*******************************************************************************
function R_SolvePrison: Boolean
By: Cstrike
Description: Solves the random.
*******************************************************************************}
function R_SolvePrison: Boolean;
var
  i, timePrison, PrisonPhase, SolveAttempts, ModelObtained, hometeleblock: Integer;
  PrisonOutOfTime: Boolean;
  AnimalIDsToPop, BalloonArrayData, BalloonHeights: TIntegerArray;
begin
  if not LoggedIn or not R_InPrison then
    Exit;
  Result := False;
  PrisonOutOfTime := False;
  g_MouseSpeedBeforePrisonRandom := MouseSpeed;
  SolveAttempts := 0;
  AnimalIDsToPop := [];
  BalloonArrayData := [];
  BalloonHeights := [];
  MakeCompass('s');

  // Phase style solving
  PrisonPhase := PRISON_PHASE_TALKTOPETEATSTART;
  MarkTime(timePrison);
  repeat

    // Phase terminate
    if not R_InPrison then
    begin
      R_Debug('R_InPrison returned as false, exiting random solver','Prison');
      Break;
    end;

    // Initiate phase solving
    case PrisonPhase of

      { Talk to pete @ start [DONE] }
      PRISON_PHASE_TALKTOPETEATSTART:
      begin
        if R_PrisonClickOnPete then
          PrisonPhase := PRISON_PHASE_FINISHSTARTINGCONVERSATION;
        // Check if terminated
        wait (500+random(1000));
        if R_PrisonPreTerminated then
        begin
          R_Debug ('R_PrisonPreTerminated returned true, we ran out of time [or logged into a terminated session]', 'Prison');
          PrisonPhase := PRISON_PHASE_EXITTHROUGHDOOR;
          PrisonOutOfTime := True;
        end;
      end;

      { If Pete is talking after we select the option, shut him up [DONE] }
      PRISON_PHASE_FINISHSTARTINGCONVERSATION:
      begin
        if R_PrisonHowDoIGetOutOfHere then
        begin
          if not R_PrisonPreTerminated then
          begin
            wait (1000+random(1000));
            //--FIX ME LATER PLZ--\\
            for i:=1 to 5 do
            begin
              ClickToContinue;
              wait (200+random(200));
            end;
            //--END OF FIX ME LATER--\\
            PrisonPhase := PRISON_PHASE_PULLLEVER;
          end;
        end;
        // Check if terminated
        if R_PrisonPreTerminated then
        begin
          R_Debug ('R_PrisonPreTerminated returned true, we ran out of time [or logged into a terminated session]', 'Prison');
          PrisonPhase := PRISON_PHASE_EXITTHROUGHDOOR;
          PrisonOutOfTime := True;
        end;
      end;

      { Pull the lever, now with 100% better heights [DONE] }
      PRISON_PHASE_PULLLEVER:
      begin
        if R_PrisonPullLever then
          PrisonPhase := PRISON_PHASE_ANALYZEANIMAL;
        // Check if terminated
        wait (2500+random(3000)); // Need better failsafe for waiting for interface
        if R_PrisonPreTerminated then
        begin
          R_Debug ('R_PrisonPreTerminated returned true, we ran out of time [or logged into a terminated session]', 'Prison');
          PrisonPhase := PRISON_PHASE_EXITTHROUGHDOOR;
          PrisonOutOfTime := True;
        end;
      end;

      { Scan to see what animal it is [DONE] }
      PRISON_PHASE_ANALYZEANIMAL:
      begin
        if R_PrisonWaitForNPCScreen(7500+random(3500)) then
        begin
          ModelObtained := R_PrisonReturnModelToPopID;
          if ModelObtained > 0 then
          begin
            R_Debug('Loading Animal NPC data...','Prison');
            if R_PrisonDetermineNPCToPop(ModelObtained, AnimalIDsToPop, BalloonArrayData, BalloonHeights) then
            begin
              R_Debug('Animal IDs to pop: '+ToStr(AnimalIDsToPop),'Prison');
              R_Debug('BalloonHeights to pop: '+ToStr(BalloonHeights),'Prison');
              PrisonPhase := PRISON_PHASE_POPANIMAL;
            end else
              R_Debug ('','Prison');
          end else
            R_Debug('PRISON_PHASE_ANALYZEANIMAL gone wrong due to wrong model number (less than 0)','Prison');
        end;
        // Ensure the screen is closed
        R_PrisonCloseModelInterface;
        // Check if terminated
        wait (500+random(1000));
        if R_PrisonPreTerminated then
        begin
          R_Debug ('R_PrisonPreTerminated returned true, we ran out of time [or logged into a terminated session]', 'Prison');
          PrisonPhase := PRISON_PHASE_EXITTHROUGHDOOR;
          PrisonOutOfTime := True;
        end;
      end;

      { Pop the valid animals }
      PRISON_PHASE_POPANIMAL:
      begin
        //if R_PrisonFindAndPopNPC(AnimalIDsToPop) then
        if R_PrisonFindAndPopNPCByHeights(BalloonHeights) then
        begin
          wait (800+random(1200));
          if R_CountItem(PRISON_KEYID) > 0 then
          begin
            R_Debug('Popped ID and got a key', 'Prison');
            PrisonPhase := PRISON_PHASE_CHECKIFWENEEDMOREKEYS;
          end else R_Debug('Lag while getting key?', 'Prison');
        end else
        begin
          //R_Debug('R_PrisonFindAndPopNPC failed, could not pop NPC and get key in time, going back to lever phase','Prison');
          R_Debug('R_PrisonFindAndPopNPCByHeights failed, could not pop NPC and get key in time, going back to lever phase','Prison');
          PrisonPhase := PRISON_PHASE_PULLLEVER;
        end;
        // Check if terminated
        wait (500+random(1000));
        if R_PrisonPreTerminated then
        begin
          R_Debug ('R_PrisonPreTerminated returned true, we ran out of time [or logged into a terminated session]', 'Prison');
          PrisonPhase := PRISON_PHASE_EXITTHROUGHDOOR;
          PrisonOutOfTime := True;
        end;
      end;

      { Wait for his response and see if we need more keys }
      PRISON_PHASE_CHECKIFWENEEDMOREKEYS:
      begin
        // Deal with Pete's crap
        R_Debug('Got key, looking for "can try it on"', 'Prison');
        if R_PrisonByPassText('can try it on', 242, 5, 5500) then
        begin
          R_Debug('Got key, looking for "the right one"', 'Prison');
          if R_PrisonByPassText('the right one', 241, 4, 5500) then
          begin
            R_Debug('Waiting for Petes response to see if we succeeded or not...', 'Prison');
            wait (6500+random(3300));

            // If we solved the random
            if R_PrisonByPassText('the keys right', 242, 5, 2500) then
            begin
              R_Debug('We solved the prison! All the keys are right', 'Prison');
              //--FIX ME LATER PLZ--\\
              for i:=1 to 5 do
              begin
                ClickToContinue;
                wait (200+random(200));
              end;
              //--END OF FIX ME LATER--\\
              PrisonPhase := PRISON_PHASE_EXITTHROUGHDOOR;
            end;

            // Else if we have the wrong key...
            if R_PrisonByPassText('wrong key', 243, 4, 800) then // Check me quickly
            begin
              R_Debug ('We got the wrong key :( Sorry...','Prison');
              while (ClickToContinue) do
                Wait (1000+random(1000));
              PrisonPhase := PRISON_PHASE_PULLLEVER;
            end;

            // If we need more keys
            if PrisonPhase <> PRISON_PHASE_EXITTHROUGHDOOR then
            begin
              if R_PrisonByPassText('next lock unlo', 242, 5, 2500) then
              begin
                R_Debug ('Need to pop more balloons', 'Prison');
                PrisonPhase := PRISON_PHASE_PULLLEVER;
              end;
              ClickToContinue;
            end else ClickToContinue;

          end else R_Debug ('Failed: R_PrisonByPassText #2','Prison');
        end else R_Debug ('Failed: R_PrisonByPassText #1','Prison');
        R_Debug ('Checking "if we need more keys" function termination...','Prison');
        // Check if terminated
        wait (500+random(1000));
        if R_PrisonPreTerminated then
        begin
          R_Debug ('R_PrisonPreTerminated returned true, we ran out of time [or logged into a terminated session]', 'Prison');
          PrisonPhase := PRISON_PHASE_EXITTHROUGHDOOR;
          PrisonOutOfTime := True;
        end;
      end;

      { Exit through the door! }
      PRISON_PHASE_EXITTHROUGHDOOR:
      begin
        R_Debug ('Trying to exit the final door...', 'Prison');
        if R_PrisonExitRandom(PrisonOutOfTime) then
        begin
          if not PrisonOutOfTime then
            R_Debug ('OMG YES I think we''re out', 'Prison');
          PrisonPhase := PRISON_PHASE_SOLVEDRANDOM;
        end;
      end;

    else // Else if the number gets fudged up for any reason
      PrisonPhase := PRISON_PHASE_TERMINATERANDOM;
    end;

    // If we mess up...
    if PrisonPhase = PRISON_PHASE_TERMINATERANDOM then
      R_Debug ('Error with prison solver phase number, terminating solver', 'Prison');

    Wait (500+random(500));

    // Just in case
    if PrisonPhase = PRISON_PHASE_SOLVEDRANDOM then
      Break;

  until (Result)
    or (TimeFromMark(timePrison) > 17*60*1000)
      or (PrisonPhase = PRISON_PHASE_TERMINATERANDOM)
        or (PrisonPhase = PRISON_PHASE_SOLVEDRANDOM)
          or not (LoggedIn)

  if (TimeFromMark(timePrison) > 15*60*1000) or not LoggedIn then
    R_Debug ('Error: Solver timed out or logged out', 'Prison');

  // Remove this crap also later
  wait (2000+random(2000));

  // Restore mouse speed if we haven't for whatever reason yet
  MouseSpeed := g_MouseSpeedBeforePrisonRandom;

  // If we succeed... :)
  Result := (PrisonPhase = PRISON_PHASE_SOLVEDRANDOM) and (PrisonOutOfTime = False);

  if not Result then
  begin
    if Reincarnate then // SRL setting, default false - for scripts with deathwalk. Might be an issue if people misuse the var!
    begin
      if TabExists(Tab_Magic) then
      begin
        R_Debug('We can teleport home soon due to Reincarnate := True in SRL!','Prison');
        MarkTime(hometeleblock);
        repeat
          GameTab(Tab_Magic);
          Mouse(575, 229, 5, 5, True); // I know this is really bad, but I don't understand how Cast() works, and I will not include magic.scar here!
          Wait(10000+Random(20000));
          if (DistanceFrom(Tile(3222, 3219)) < 15) then // Back at Lumby courtyard.
          begin
            Result := True;
            R_Debug('Back at Lumbridge from Prison! Please deathwalk back to where you were.','Prison');
            R_Debug('If your script does not have deathwalk, please set Reincarnate := False;!','Prison');
            Exit;
          end;
        until (TimeFromMark(hometeleblock) > 8*60000); // 8 minutes - block lasts for 5 usually. If it takes this long something is goofed!
        R_Debug('Prison reincarnate failed. Took too long to get home :(','Prison');
        Result := False;
      end;
    end;
  end;
end;
