// Special thanks to RSBot for making this possible
// Special thanks to Bad Boy JH for helping us create this

const
  CERTER_PORTALID = 11368;
  CERTER_MUSIC = 'Dream'; //Start, autumn voyage, unknown land
  CERTER_GILES_NPC_ID = 8635;
  CERTER_NPCNAME1 = 'Niles';
  CERTER_NPCNAME2 = 'Miles';
  CERTER_NPCNAME3 = 'Giles';
  CERTER_START_TALK = 'to identify something for me.';
  CERTER_MODELINTERFACE = 184;
  CERTER_MODELCHILD = 8;
  CERTER_MODELCOMP = 3; // Get model ID
  CERTER_CHOICE_A_TEXT = 0; // From 184 8 [x]
  CERTER_CHOICE_B_TEXT = 1; // "
  CERTER_CHOICE_C_TEXT = 2; // "

{*******************************************************************************
function R_InCerter : Boolean;
By: Cstrike
Description: Checks if in this random.
*******************************************************************************}
function R_PORTALOBJECT(T: TTile): TRSObject;
begin
  Result := NewObject(CERTER_PORTALID, OBJECT_TYPE_INTERACTABLE, T, T, PointToBox(T,T));
end;

function R_InCerter : Boolean;
var
  NPC: TNPC;
  T: TTile;
begin
  Result := FindNPCMulti([CERTER_NPCNAME1, CERTER_NPCNAME2, CERTER_NPCNAME3], NPC);
  if Result then
  begin
    T := Tile(NPC.Tile.x + 8, NPC.Tile.y);
    Result := FindRSObjectSimple(R_PORTALOBJECT(T));
  end;
end;

// Inheritance
function R_CerterGetChildCompID(ParentI, ChildI, CompI: Integer) : Integer;
begin
  Result := GetChildComponentID(ParentI, ChildI, CompI);
end;

// Inheritance
function R_CerterGetComponentText(ParentI, ChildI, CompI: Integer) : String;
begin
  Result := GetChildComponentText(ParentI, ChildI, CompI);
end;

{*******************************************************************************
function R_CerterClickContinueIfTalking : Boolean;
By: Cstrike
Description: Handles certer talking to us.
*******************************************************************************}
function R_CerterClickContinueIfTalking : Boolean;
var
  i, j, t : Integer;
  ChatActive : Boolean;
begin
  if not LoggedIn then Exit;
  Result := False;
  ChatActive := False; // Boolean for if were talking

  // Check if were being talked to
  for j := 241 to 245 do
  begin
    if ValidInterface(j) then
    begin
      ChatActive := True;
      Break;
    end;
  end;

  // If we find no chat boxes then...
  if not ChatActive then
  begin
    r_Debug('Certer is not talking to us, returning result true', 'Certer');
    Result := True;
    Exit;
  end;

  // Since we have chat, enter a 15-20 second loop that keeps looking for chat and clicking continue
  MarkTime(t);
  repeat
    for i := 241 to 245 do
    begin
      if ValidInterface(i) then
      begin
        Mouse(303, 452, 72, 7, True);
        MMouse(203, 352, 80, 50);
        wait(1000+random(2000));
      end;
    end;

    // Check if were being talked to again
    for j := 241 to 245 do
    begin
      if ValidInterface(j) then
      begin
        ChatActive := True;
        Break;
      end;
    end;
    wait(500+random(350));

    if not ChatActive then Break;
    ChatActive := False; // If we come around again it will be set true if were still talking

  until (TimeFromMark(t) > 20000)

  if not (TimeFromMark(t) > 20000) then Result := True
  else r_Debug('Had an error (or lag) while talking to certer!', 'Certer');
end;

{*******************************************************************************
function R_CerterSelectAnswer : Boolean;
By: Cstrike
Description: Selects right answer.
*******************************************************************************}
function R_CerterSelectAnswer : Boolean;
var
  CerterIDArr : TIntegerArray;
  CerterNameArr : TStringArray;
  ModelIDNumber, i, j, t, AnswerLetter : Integer;
  ModelIDName : String;
begin
  if not LoggedIn then Exit;
  Result := False;
  ModelIDName := '';
  ModelIDNumber := -2;
  AnswerLetter := -1;

  // Interface failsafe
  if not ValidInterface(CERTER_MODELINTERFACE) then
  begin
    r_Debug('Not at certer interface!', 'Certer');
    Exit;
  end;

  // These line up with one another for what to look for
  CerterIDArr := [2807, 8828, 8829, 8832, 8833, 8834, 8835, 8836, 8837];
  CerterNameArr := ['bowl', 'battleaxe', 'fish', 'shield', 'helmet', 'ring', 'shears', 'sword', 'spade'];
  ModelIDNumber := GetChildComponentModelID(CERTER_MODELINTERFACE, CERTER_MODELCHILD, CERTER_MODELCOMP);

  // Search for index
  for i := 0 to high (CerterIDArr) do
  begin
    if CerterIDArr[i] = ModelIDNumber then Break;
    r_Debug('['+ToStr(i)+'/'+ToStr(high(CerterIDArr))+']'+ToStr(CerterIDArr[i]) +' -- '+ToStr(ModelIDNumber), 'Certer');
  end;

  // If we max out the array and dont find it, then we failed...
  if (i = high(CerterIDArr)) and (ModelIDNumber <> CerterIDArr[high(CerterIDArr)]) then
  begin
    r_Debug('Warning, ID number not known (Random gave us model ID #'+ToStr(ModelIDNumber)+')', 'Certer');
    Exit;
  end;

  // Now, since we found it...
  ModelIDName := CerterNameArr[i];

  // Failsafe
  if ModelIDName = '' then
  begin
    r_Debug('Model name not valid (its blank)', 'Certer');
    Exit;
  end;

  // Tell our user and debug at the same time
  r_Debug('Found ID #'+ToStr(ModelIDNumber)+', therefore looking for '+ModelIDName+' in answers', 'Certer');

  // Search interface for proper name
  for j := CERTER_CHOICE_A_TEXT to CERTER_CHOICE_C_TEXT do
  begin
    if (pos(lowercase(ModelIDName),lowercase(R_CerterGetComponentText(CERTER_MODELINTERFACE, CERTER_MODELCHILD, j))) > 0) then
    begin
      AnswerLetter := j;
      r_Debug('Found answer at position: '+ToStr(AnswerLetter)+' of 2', 'Certer');
    end;
  end;

  // Failsafe
  if AnswerLetter < 0 then
  begin
    r_Debug('Had trouble finding the answer text: '+ModelIDName, 'Certer');
    Exit;
  end;

  // Seem human while making decision
  wait(1000+random(2500));

  // Move mouse to answer [based off of answerletter
  Mouse(130, (55 + (AnswerLetter*35)), 40, 3, true);

  // Wait for response to see if we succeeded
  MarkTime(t);
  repeat
    wait(50);
  until (not ValidInterface(CERTER_MODELINTERFACE)) or (TimeFromMark(t) > 15000)
  if not ValidInterface(CERTER_MODELINTERFACE) then
  begin
    r_Debug('Chose answer, hopefully correct', 'Certer');
    Result := True;
  end;
end;

{*******************************************************************************
function R_CerterTalkToNPC: Boolean;
By: Cstrike
Description: Talks to certer if we are not for some reason.
*******************************************************************************}
function R_CerterTalkToNPC: Boolean;
var
  i, j, k: Integer;
  NPCs : TNPCArray;
  TP : TPoint;
begin
  if not LoggedIn then Exit;
  Result := True;

  // If were at the model screen, skip
  if ValidInterface(CERTER_MODELINTERFACE) then Exit;

  // If were talking to him, skip...
  for i:=0 to high(INTERFACE_TALKS) do
    if ValidInterface(INTERFACE_TALKS[i]) then Exit;

  Result := False; // If we are clearly not talking to him then... now try to talk to him

  // Regular NPCs
  NPCs := GetAllNPCs(False);
  if high(NPCs) > -1 then // We have a match in this case
    for j:=0 to high(NPCs) do
    begin
      if TileOnMS(NPCs[j].Tile, 0) then
      begin
        TP := TileToMS(NPCs[j].Tile, 0);
        Mouse(TP.X, TP.Y, 2, 2, false);
        wait(500+random(500));
        if R_ChooseOptionMulti(['iles', 'alk-to']) then
        begin
          r_Debug('Selected talk to NPC since we weren''t talking to him', 'Certer');
          Result := True;
          wait(2000+random(2000));
          Exit;
        end;
      end;
    end;

  // Null NPC's if Jagex wants to screw with us
  NPCs := GetAllNPCs(True);
  if high(NPCs) > -1 then // We have a match in this case
    for k:=0 to high(NPCs) do
    begin
      if TileOnMS(NPCs[k].Tile, 0) then
      begin
        TP := TileToMS(NPCs[k].Tile, 0);
        Mouse (TP.X, TP.Y, 2, 2, false);
        wait(500+random(500));
        if R_ChooseOptionMulti(['iles', 'alk-to']) then
        begin
          r_Debug('Selected talk to NPC since we weren''t talking to him', 'Certer');
          Result := True;
          wait(2000+random(2000));
          Exit;
        end;
      end;
    end;
  r_Debug('Warning: We are not talking to a Certer and we can''t find them...', 'Certer');
end;

{*******************************************************************************
function R_CerterExitCerter : Boolean;
By: Cstrike
Description: Exits through portal.
*******************************************************************************}
function R_CerterExitCerter : Boolean;
var
  PortalObj: TRSObject;
  TP: TPoint;
begin
  if not LoggedIn then Exit;
  Result := False;
  PortalObj := GetObjectByID(CERTER_PORTALID, OBJECT_TYPE_INTERACTABLE, 13);
  if (PortalObj = NULL_RSOBJECT) then Exit;
  if TileOnMS(PortalObj.Tile, 0) then
  begin
    TP := TileToMS(PortalObj.Tile, 0);
    Mouse(TP.x, TP.y, 3, 3, false);
    if R_ChooseOptionMulti(['nte', 'orta']) then
    begin
      Result := True;
      R_Flag;
    end;
    wait(500+random(500));
  end;

end;

{*******************************************************************************
function R_SolveCerter : Boolean;
By: Cstrike
Description: Solves certer.
*******************************************************************************}
function R_SolveCerter : Boolean;
var
  i, t: Integer;
begin
  if not LoggedIn then Exit;
  Result := False;
  MakeCompass('n');
  if R_InCerter then
  begin
    for i := 1 to 3 do // 3 chances
    begin
      if R_CerterClickContinueIfTalking then
      begin
        wait(200+random(200));
        if R_CerterTalkToNPC then
        begin
          wait(300+random(300));
          if R_CerterClickContinueIfTalking then
          begin
            wait(250+random(270));
            if R_CerterSelectAnswer then
            begin
              wait(400+random(210));
              if R_CerterClickContinueIfTalking then
              begin
                wait(600+random(250));
                if R_CerterExitCerter then
                begin
                  wait(400+random(700));
                  r_Debug('Certer portal exiting completed.', 'Certer');
                  Result := True;
                  Break;
                end else r_Debug('Error: Had trouble exiting random', 'Certer');
              end else r_Debug('Error: Had trouble while talking to certer', 'Certer');
            end else r_Debug('Error: Had trouble selecting right answer', 'Certer');
          end else r_Debug('Error: Had trouble while talking to certer', 'Certer');
        end else r_Debug('Error: Had trouble with certer interaction', 'Certer');
      end else r_Debug('Error: Had trouble while talking to certer', 'Certer');
      wait(1000+random(2000));
    end; // End 3 chances
  end else r_Debug('Warning: Not in certer random', 'Certer');
  MarkTime(t);
  if R_InCerter then
    while R_InCerter and (TimeFromMark(t) < 8000) do
      wait(350);
  Result := (R_LoggedIn and (not R_InCerter));
  if not Result then r_Debug('Failed solving certer.', 'Certer')
    else Wait(1500 + random(1500));
end;
