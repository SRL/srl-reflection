const
  r_RandomCount = 18;

  Result_Randoms_All = 0;
  Result_Randoms_Failed = 1;
  Result_Randoms_Solved = 2;

type
  r_Random = Record
    RandName, Music: String;
    InRandom, SolveRandom: function: Boolean;
  end;

var
  r_RandomArr: Array [0..17] of r_Random;
  r_RandomVarSet, r_LogoutOnRandom: Boolean;


Procedure r_SetupRandoms;
begin
  r_Debug('Randoms var set!', '');

  With r_RandomArr[rand_Abyss] do
  begin
    RandName := 'Abyss';
    Music := 'into the abyss';
    InRandom := @R_InAbyss;
    SolveRandom := @R_SolveAbyss;
  end;

  With r_RandomArr[rand_Beekeeper] do
  begin
    RandName := 'Beekeeper';
    Music := ''; // Wheres the music?
    InRandom := @r_InBeekeeper;
    SolveRandom := @R_SolveBeekeeper;
  end;

  // Needs deposit
  // BTW N1ke, this is "capn arNav" :P
  With r_RandomArr[rand_CapnArnav] do
  begin
    RandName := 'Cap n'' Arrav';
    Music := ''; //High Seas possibly!
    InRandom := @R_InArnav;
    SolveRandom := @R_SolveArnav;
  end;

  With r_RandomArr[rand_Certer] do
  begin
    RandName := 'Certer';
    Music := ''; //'start', 'unknown land', 'dream', 'autumn voyage';
    InRandom := @R_InCerter;
    SolveRandom := @R_SolveCerter;
  end;

  With r_RandomArr[rand_Demon] do
  begin
    RandName := 'Drill Demon';
    Music := 'corporal punishment';
    InRandom := @R_InDemon;
    SolveRandom := @R_SolveDemon;
  end;

  // Needs deposit
  With r_RandomArr[rand_ScapeRune] do
  begin
    RandName := 'Evilbob';
    Music := 'evil bob''s island';
    InRandom := @R_InScapeRune;
    SolveRandom := @R_SolveScapeRune;
  end;

  With r_RandomArr[rand_Mordaut] do
  begin
    RandName := 'Exam';
    Music := 'school''s out';
    InRandom := @R_InMordaut;
    SolveRandom := @R_SolveMordaut;
  end;

  // Needs deposit
  With r_RandomArr[rand_Forester] do
  begin
    RandName := 'Freaky forester';
    Music := 'pheasant peasant';
    InRandom := @R_InForester;
    SolveRandom := @R_SolveForester;
  end;

  With r_RandomArr[rand_Frog] do
  begin
    RandName := 'Frog';
    Music := 'frogland';
    InRandom := @R_InFrogCave;
    SolveRandom := @R_SolveFrogCave;
  end;

  // Needs deposit
  With r_RandomArr[rand_Leo] do
  begin
    RandName := 'Gravedigger';
    Music := 'spooky';
    InRandom := @r_InLeo;
    SolveRandom := @r_SolveLeo;
  end;

  With r_RandomArr[rand_Maze] do
  begin
    RandName := 'Maze';
    Music := 'time out';
    InRandom := @r_InMaze;
    SolveRandom := @r_SolveMaze;
  end;

  With r_RandomArr[rand_Mime] do
  begin
    RandName := 'Mime';
    Music := 'artistry';
    InRandom := @R_InMime;
    SolveRandom := @R_SolveMime;
  end;

  With r_RandomArr[rand_Molly] do
  begin
    RandName := 'Molly';
    Music := 'head to head';
    InRandom := @R_InMolly;
    SolveRandom := @R_SolveMolly;
  end;

  // This is just broken to hell
  With r_RandomArr[rand_Pillory] do
  begin
    RandName := 'Pillory';
    Music := '';
    InRandom := @R_InPillory;
    SolveRandom := @R_SolvePillory;
  end;

  With r_RandomArr[rand_Pinball] do
  begin
    RandName := 'Pinball';
    Music := 'pinball wizard';
    InRandom := @R_InPinball;
    SolveRandom := @R_SolvePinball;
  end;

  // Needs deposit
  With r_RandomArr[rand_PrisonPete] do
  begin
    RandName := 'Prison';
    Music := 'in the clink';
    InRandom := @R_InPrison;
    SolveRandom := @R_SolvePrison;
  end;

  With r_RandomArr[rand_Quiz] do
  begin
    RandName := 'Quiz';
    Music := 'the quiz master';
    InRandom := @R_InQuizMaster;
    SolveRandom := @R_SolveQuizMaster;
  end;

  With r_RandomArr[rand_Sandwich] do
  begin
    RandName := 'Sandwhich lady';
    Music := 'snack attack';
    InRandom := @r_InSandwichLadyRandom;
    SolveRandom := @r_SolveSandwichRandom;
  end;

  r_RandomVarSet := True;
end;

function r_GetMusic: String;
begin
  Result := GetInterfaceText(187, 4);
end;

function R_SolveNonTalkingRandoms: Boolean;
var
  I, iTime: Integer;
  Music: String;
  InRand: Boolean;
  T: TTile;
  RandomBox: TBox;
begin
  If Not LoggedIn then
    Exit;

  If Not r_RandomVarSet then
    r_SetupRandoms;

  Music := LowerCase(r_GetMusic);
  for I := 0 to r_RandomCount-1 do
  begin

    If (r_RandomArr[I].Music = Music)or(r_RandomArr[I].Music = '')then
      if (r_RandomArr[I].InRandom <> nil) then
        InRand := r_RandomArr[I].InRandom()
      else
      begin
        if (not(r_RandomArr[I].InRandom <> nil)and(r_RandomArr[I].Music = ''))then
           Continue;
        R_Debug('Might be in a random(missing InRandom function), terminating.', '');
        Players[CurrentPlayer].Rand := r_RandomArr[I].RandName;
        LogOut;
        Exit;
      end;

    if (InRand) then
    begin
      Players[CurrentPlayer].Rand := r_RandomArr[I].RandName;

      if r_LogoutOnRandom then
      begin
        R_Debug('Found random: ' + r_RandomArr[I].RandName, '');
        R_Debug('Logging player out and setting false', '');
        Logout;
        Players[CurrentPlayer].Active := False;
        Exit;
      end;

      R_Debug('Trying to solve: ' + r_RandomArr[I].RandName, '');
      T := GetMyPos;
      RandomBox := IntToBox(T.X-70, T.Y-70, T.X+70, T.Y+70);

      if (r_RandomArr[I].SolveRandom <> nil) then
      begin
        SetAngle(True);
        Result := r_RandomArr[I].SolveRandom()
      end else
      begin
        R_Debug('No random solver for ' + r_RandomArr[I].RandName, '');
        Logout;
        Players[CurrentPlayer].Active := False;
        Inc(RandFailed[I]);
        Exit;
      end;

      if (not Result) then
      begin
        R_Debug('Random solving failed for ' + r_RandomArr[I].RandName, '');
        Logout;
        Players[CurrentPlayer].Active := False;
        Inc(RandFailed[I]);
        Exit;
      end else
        R_Debug(r_RandomArr[I].RandName + ' solved', '');

      iTime := GetSystemTime;
      While TileInBox(RandomBox, GetMyPos)do
      begin
        Wait(1000+Random(1500));
        If (GetSystemTime - iTime > 30000)then
          Exit;
      end;
      R_Debug('Out of random', '');
      Wait(3000+Random(2000));

      Players[CurrentPlayer].Rand := '';
      Inc(RandSolved[I]);
      Exit;
    end;

  end;
end;

{*******************************************************************************
function R_FindRandoms: Boolean;
By: Nava2
Description: Calls the random checks.
*******************************************************************************}
function R_FindRandoms: Boolean;
begin
  Result := R_SolveNonTalkingRandoms;
  R_FindRewardBoxes;

  if (Result) then
  begin
    if (SRL_Procs[srl_OnFindRandom] <> nil) then
      SRL_Procs[srl_OnFindRandom]();
  end;
end;

{*******************************************************************************
function R_FindRandomsDeposit (ItemsToNotDeposit : TIntegerArray): Boolean;
By: Nava2, modded by Cstrike
Description: Does random checks, and once developed, will deposit items you
specifiy for randoms so you don't lose anything precious.
*******************************************************************************}
{
function R_FindRandomsDeposit (ItemsToNotDeposit : TIntegerArray) : Boolean;
begin
  Result := R_SolveNonTalkingRandoms (ItemsToNotDeposit);
  if (Result) then
  begin
    if (SRL_Procs[srl_OnFindRandom] <> nil) then
      SRL_Procs[srl_OnFindRandom]();
  end;
end;
}

{*******************************************************************************
function R_OnFindRandomCall(var Cont : boolean) : boolean;
Description: This event is called when SRL calls the FindNormalRandoms procedure.
Thus it will always try to solve the randoms by using reflection first!
*******************************************************************************}
function R_OnFindRandomCall(var Cont : boolean) : boolean;
begin
  Result := R_FindRandoms;
  Cont := not Result;
end;

{*******************************************************************************
function RandomsResult(Which: Integer): TStringArray;
Description:
  Result_Randoms_All = Solved + Failed
  Result_Randoms_Failed = Failed
  Result_Randoms_Solved = Solved

Results the randoms solving in a TStringArray, example  ['[S] 1 Maze', '[F] 2 Forester']
[S] = Solved
[F] = Failed
*******************************************************************************}
function RandomsResult(Res: Integer): TStringArray;
var
  I, arrC: Integer;

begin
  If Not r_RandomVarSet then
    r_SetupRandoms;

  SetArrayLength(Result, 36);

  If(Res = Result_Randoms_Solved)or(Res = Result_Randoms_All)then
  begin
    For I:=0 to r_RandomCount-1 do
      If Not (RandSolved[I] = 0)then
      begin
        Result[arrC] := '[S] ' + ToStr(RandSolved[I]) + ' ' + r_RandomArr[I].RandName;
        Inc(arrC);
      end;
  end;

  If(Res = Result_Randoms_Failed)or(Res = Result_Randoms_All)then
    For I:=0 to r_RandomCount-1 do
      If Not (RandFailed[I] = 0)then
      begin
        Result[arrC] := '[F] ' + ToStr(RandSolved[I]) + ' ' + r_RandomArr[I].RandName;
        Inc(arrC);
      end;

  SetArrayLength(Result, arrC);
end;
